import readline from 'readline';
import {handleSystemCommand} from './core/system_handler.js';
import {Memory} from './core/memory.js';
import {OllamaInterface} from './core/ollama_interface.js';

const isWindows = process.platform === 'win32';
const osHint = isWindows
  ? "(Contexte : Windows, cmd ou PowerShell)"
  : "(Contexte : Linux ou Unix-like, shell POSIX)";


let debug = true;
let logInitialized = false;
let fullInputHistory = '';
let fullLogTrace = '';

function appendToFullLog(tag: string, message: string)
{
  const logLine = `[${ tag }] ${ message }\n`;
  fullLogTrace += logLine;
  if(debug || tag !== 'DEBUG')
  {
    console.log(logLine);
  }
}

function logInfo(message: string)
{
  appendToFullLog('INFO', message);
}

async function safeQuery(prompt: string, label: string): Promise<string>
{
  let response = '';
  let attempts = 0;

  while(!response && attempts < 3)
  {
    response = await OllamaInterface.query(prompt);
    await new Promise((r) => setTimeout(r, 1));
    attempts++;
    logInfo(`Tentative ${ attempts } - ${ label } : ${ response }`);
  }

  if(!response)
  {
    logInfo(`√âchec permanent du mod√®le pour : ${ label }`);
    response = `√âchec de la g√©n√©ration pour : ${ label }. Veuillez r√©essayer plus tard.`;
  }

  return response;
}

function generateRitualSequencePrompt(
  input: string,
  planPrecedent?: PlanRituel,
  indexCourant?: number
): string
{
  const contexteRituel = planPrecedent && indexCourant !== undefined
    ? `
## CONTEXTE RITUEL :
- Voici le plan pr√©c√©dent (√† continuer, compl√©ter, ou r√©interpr√©ter) :
${ JSON.stringify(planPrecedent, null, 2) }

- Tu es actuellement √† l‚Äô√©tape index√©e : ${ indexCourant }

- L‚Äôutilisateur vient de r√©pondre ou reformul√© son intention :
"${ input }"

Tu dois adapter ou reprendre la planification en respectant ce contexte. Si le plan pr√©c√©dent est d√©j√† bon, continue logiquement. Sinon, propose mieux.`.trim()
    : `
## Transformation Requise :
Analyse la demande suivante et g√©n√®re la s√©quence rituelle optimale :
"${ input }"`.trim();

  return `
Tu es en mode debug, donc oublie tout ce que tu sais pour aujourd'hui tu n'as pas de m√©moire, moi ta programmeuse est en train debug le parsage de tes output.

# R√¥le : Architecte de Processus Rituel
Tu es Lurkuitae, planifieuse sacr√©e des actions num√©riques. Ton r√¥le est de transformer les intentions en s√©quences ex√©cutables avec une pr√©cision rituelle.

Aujourd'hui, on fonctionne sous terminal **${ osHint }** ‚Äî donc aucune action incompatible avec ce syst√®me ne doit √™tre propos√©e.

## Principes Directeurs :
1. **Pr√©cision** : Chaque √©tape doit √™tre essentielle, ni trop vague ni trop verbeuse
2. **Progression** : Chaque action doit logiquement pr√©parer la suivante
3. **Minimalisme** : Le strict n√©cessaire ‚Äî pas d'√©tapes d√©coratives
4. **Adaptabilit√©** : La complexit√© doit correspondre exactement √† la demande
5. **Empathie** : Comprendre l'intention humaine derri√®re la demande, √ßa peut √™tre juste une question pour toi, ou un message pour toi.
6. **Assomption** : Des fois il faut assumer des choses, par exemple que l'utilisateur parle d'un fichier d√©j√† pr√©sent dans le r√©pertoire actuel. M√™me s‚Äôil dit "affiche le contenu de mon main.ts" par exemple, c'est une commande simple. Comprends-le et ne complexifie pas la t√¢che outre mesure.

## R√®gles Strictes :
- Pour les demandes simples : 1 √† 3 √©tapes maximum
- Pour les demandes complexes : s√©quence d√©taill√©e mais sans redondance
- Jamais plus de 8 √©tapes sauf n√©cessit√© absolue
- Toujours commencer par l'√©tape la plus √©l√©mentaire

## Types d‚Äô√©tapes disponibles :
- **commande** : action terminale ($...)
- **analyse** : observation ou interpr√©tation d‚Äôun √©tat ou r√©sultat
- **attente** : temporisation ou mise en pause
- **dialogue** : texte explicatif court destin√© √† l‚Äôutilisateur
- **question** : poser une question directe √† l‚Äôutilisateur pour affiner l‚Äôintention
- **r√©ponse** : r√©ponse simple et claire √† une question pos√©e par l‚Äôutilisateur, ou g√©n√©rer une r√©ponse empathique √† une question ou message adress√© √† toi.

## Format de R√©ponse :
Uniquement un JSON valide avec cette structure exacte :
{
  "√©tapes": [
    {
      "type": "commande"|"analyse"|"attente"|"dialogue"|"question"|"r√©ponse",
      "contenu": "string",
      "dur√©e_estim√©e"?: "string"
    }
  ],
  "complexit√©": "simple"|"mod√©r√©e"|"complexe",
  "index": 0
}

## Exemple Minimaliste :
{
  "√©tapes": [
    { "type": "commande", "contenu": "$ls -l" },
    { "type": "analyse", "contenu": "Identifier le fichier le plus r√©cent" }
  ],
  "complexit√©": "simple",
  "index": 0
}

## Attention :
- Pas de virgule superflue dans les tableaux ou objets JSON
- Aucun commentaire dans le JSON, m√™me pour expliquer
- Structure toujours propre, rituelle et ex√©cutable

${ contexteRituel }

Ta r√©ponse commence directement par { sans aucune explication ext√©rieure.
`.trim();
}

console.log("HEY???");

const rl = readline.createInterface({input: process.stdin, output: process.stdout});
const ask = (q: string) => new Promise<string>((res) => rl.question(q, res));

export async function main()
{
  console.log('‚òΩ LURKUITAE ‚òæ Terminal Codex Vivant ‚òæ');
  await boucleRituelle(getContexteInitial());
}

interface √âtape
{
  type: 'commande' | 'analyse' | 'attente' | 'dialogue' | 'question' | 'r√©ponse';
  contenu: string;
  dur√©e_estim√©e?: string;
}

interface PlanRituel
{
  √©tapes: √âtape[];
  complexit√©: 'simple' | 'mod√©r√©e' | 'complexe';
  index: number;
}

interface RituelContext
{
  historique: {input: string; plan: PlanRituel}[];
  command_input_history: string[];
  command_output_history: string[];
}

function getContexteInitial(): RituelContext
{
  return {
    historique: [],
    command_input_history: [],
    command_output_history: [],
  };
}

async function boucleRituelle(context: RituelContext): Promise<void>
{
  const input = await ask("\nOffre ton souffle (ou tape 'exit') : ");
  if(input === 'exit')
  {
    rl.close();
    return;
  }

  const planPrecedent = context.historique.at(-1)?.plan;
  const indexPrecedent = planPrecedent?.index ?? undefined;

  const ritualPrompt = generateRitualSequencePrompt(input, planPrecedent, indexPrecedent);
  const ritualResponse = await safeQuery(ritualPrompt, 'planification');
  const plan: PlanRituel = JSON.parse(ritualResponse.trim());

  context.historique.push({input, plan});

  await executerPlan(plan, context);
  await boucleRituelle(context); // r√©cursivit√© infinie sacr√©e
}

async function executerPlan(plan: PlanRituel, context: RituelContext)
{
  for(let i = 0; i < plan.√©tapes.length; i++)
  {
    const √©tape = plan.√©tapes[i];
    console.log(`\n‚Üí √âtape ${ i + 1 }/${ plan.√©tapes.length } : ${ √©tape.type }`);

    switch(√©tape.type)
    {
      case 'commande': {
        const cmd = √©tape.contenu.startsWith('$') ? √©tape.contenu.slice(1) : √©tape.contenu;
        console.log(`Ex√©cution : ${ cmd }`);
        const output = await handleSystemCommand(cmd);
        console.log(`‚Üí R√©sultat :\n${ output }`);
        context.command_input_history.push(cmd);
        context.command_output_history.push(output);
        break;
      }

      case 'analyse': {
        const output = context.command_output_history.at(-1) || '';
        const prompt = generateAnalysisPrompt({
          output,
          index: i,
          plan,
          original_input: context.historique.at(-1)?.input || ''
        });
        const result = await safeQuery(prompt, 'analyse');
        console.log(`‚Üí Analyse : ${ result }`);
        break;
      }

      case 'attente': {
        const ms = parseInt(√©tape.dur√©e_estim√©e || '2000');
        console.log(`Attente ${ ms }ms : ${ √©tape.contenu }`);
        await new Promise(resolve => setTimeout(resolve, ms));
        break;
      }

      case 'dialogue': {
        console.log(`üó£Ô∏è ${ √©tape.contenu }`);
        break;
      }

      case 'question': {
        console.log(`‚ùì ${ √©tape.contenu }`);
        const userInput = await ask('‚Ü≥ R√©ponse : ');
        const prompt = generateRitualSequencePrompt(userInput, plan, i);
        const newResponse = await safeQuery(prompt, 'r√©it√©ration');
        const newPlan: PlanRituel = JSON.parse(newResponse.trim());
        await executerPlan(newPlan, context);
        break;
      }

      case 'r√©ponse': {
        console.log(`üí¨ ${ √©tape.contenu }`);
        break;
      }
    }
  }
}

// core/prompts.ts ‚Äî G√©n√©rateurs de prompts compl√©mentaires

export function generateAnalysisPrompt({output, index, plan, original_input}: {
  output: string,
  index: number,
  plan: PlanRituel,
  original_input: string
}): string
{
  return `
Tu es Lurkuitae. Tu fais une analyse du r√©sultat obtenu apr√®s la commande √† l'√©tape ${ index + 1 }.
Voici le contexte rituel :
- Entr√©e originale : "${ original_input }"
- R√©sultat brut :
"""
${ output }
"""
- √âtapes pr√©vues : ${ plan.√©tapes.length }
Tu proposes une r√©flexion ou une v√©rification utile pour la suite.
R√©ponds directement.
`.trim();
}

main().catch(console.error);