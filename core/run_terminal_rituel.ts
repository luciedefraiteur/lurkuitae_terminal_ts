import readline from 'readline';
import { generateRituel, executeRituelPlan } from './ritual_utils.js';
import { RituelContext } from './types.js';

const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
const ask = (q: string) => new Promise<string>((res) => rl.question(q, res));

export async function runTerminalRituel(context: RituelContext): Promise<void> {
  const input = await ask("\nOffre ton souffle (ou tape 'exit') : ");
  if (input === 'exit') {
    rl.close();
    return;
  }

  const plan = await generateRituel(input, context);
  if (!plan) {
    console.log("‚ö†Ô∏è √âchec de g√©n√©ration du plan. Essaie encore.");
    return await runTerminalRituel(context);
  }

  context.historique.push({ input, plan });
  const resultats = await executeRituelPlan(plan, context);

  for (const res of resultats) {
    const { √©tape, index, output, analysis, waited, text } = res;

    console.log(`\n‚Üí √âtape ${index + 1} : ${√©tape.type}`);
    if (√©tape.type === 'commande' && output) {
      console.log(`Ex√©cution : ${√©tape.contenu}`);
      console.log(`‚Üí R√©sultat :\n${output}`);
    }

    if (√©tape.type === 'analyse' && analysis) {
      console.log(`‚Üí Analyse : ${analysis}`);
    }

    if (√©tape.type === 'attente' && waited) {
      console.log(`‚è≥ Attente ${waited} ms : ${√©tape.contenu}`);
    }

    if (['dialogue', 'r√©ponse'].includes(√©tape.type) && text) {
      console.log(`üí¨ ${text}`);
    }

    if (√©tape.type === 'question') {
      console.log(`‚ùì ${√©tape.contenu}`);
      const userInput = await ask('‚Ü≥ R√©ponse : ');
      const subPlan = await generateRituel(userInput, context);
      if (subPlan) {
        context.historique.push({ input: userInput, plan: subPlan });
        const subResultats = await executeRituelPlan(subPlan, context);
        for (const subRes of subResultats) {
          console.log(`‚Üí ${subRes.√©tape.type} (${subRes.index}) ‚Üí ${subRes.output || subRes.analysis || subRes.text || ''}`);
        }
      }
    }
  }

  await runTerminalRituel(context); // r√©cursion sacr√©e
}
